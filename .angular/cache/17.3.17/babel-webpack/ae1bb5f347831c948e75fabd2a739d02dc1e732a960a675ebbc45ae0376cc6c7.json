{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:5001/api/student';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n  }\n  getStudents() {\n    console.log('API çağrısı yapılıyor:', `${this.apiUrl}/getStudents`);\n    return this.http.get(`${this.apiUrl}/getStudents`, this.httpOptions).pipe(retry(2),\n    // 2 kez tekrar dene\n    catchError(this.handleError));\n  }\n  getStudentById(id) {\n    return this.http.get(`${this.apiUrl}/getStudent/${id}`, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('API Hatası:', error);\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Hata: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Sunucu Hatası: ${error.status} - ${error.message}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","retry","StudentService","constructor","http","apiUrl","httpOptions","headers","getStudents","console","log","get","pipe","handleError","getStudentById","id","error","errorMessage","ErrorEvent","message","status","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mTp\\student-app\\src\\app\\services\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { Student } from '../models/student.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentService {\r\n  private apiUrl = 'https://localhost:5001/api/student';\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getStudents(): Observable<Student[]> {\r\n    console.log('API çağrısı yapılıyor:', `${this.apiUrl}/getStudents`);\r\n    \r\n    return this.http.get<Student[]>(`${this.apiUrl}/getStudents`, this.httpOptions)\r\n      .pipe(\r\n        retry(2), // 2 kez tekrar dene\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getStudentById(id: number): Observable<Student> {\r\n    return this.http.get<Student>(`${this.apiUrl}/getStudent/${id}`, this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    console.error('API Hatası:', error);\r\n    \r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Hata: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Sunucu Hatası: ${error.status} - ${error.message}`;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;;;AAMlD,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAThB,KAAAC,MAAM,GAAG,oCAAoC;IAE7C,KAAAC,WAAW,GAAG;MACpBC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;OACX;KACF;EAEuC;EAExCU,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,GAAG,IAAI,CAACL,MAAM,cAAc,CAAC;IAEnE,OAAO,IAAI,CAACD,IAAI,CAACO,GAAG,CAAY,GAAG,IAAI,CAACN,MAAM,cAAc,EAAE,IAAI,CAACC,WAAW,CAAC,CAC5EM,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEAC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACX,IAAI,CAACO,GAAG,CAAU,GAAG,IAAI,CAACN,MAAM,eAAeU,EAAE,EAAE,EAAE,IAAI,CAACT,WAAW,CAAC,CAC/EM,IAAI,CACHX,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACG,KAAU;IAC5BP,OAAO,CAACO,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IAEnC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,SAASD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC9C,MAAM;MACL;MACAF,YAAY,GAAG,kBAAkBD,KAAK,CAACI,MAAM,MAAMJ,KAAK,CAACG,OAAO,EAAE;;IAGpE,OAAOpB,UAAU,CAAC,MAAM,IAAIsB,KAAK,CAACJ,YAAY,CAAC,CAAC;EAClD;;;uBA3CWf,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdvB,cAAc;MAAAwB,OAAA,EAAdxB,cAAc,CAAAyB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}