{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nlet DashboardComponent = class DashboardComponent {\n  constructor(studentService, materialService) {\n    this.studentService = studentService;\n    this.materialService = materialService;\n    this.students = [];\n    this.materials = [];\n    this.isLoading = false;\n    this.error = null;\n    // Statistics\n    this.totalStudents = 0;\n    this.activeStudents = 0;\n    this.totalMaterials = 0;\n    this.totalProfit = 0;\n    this.totalLoss = 0;\n    this.netProfit = 0;\n    // Charts data\n    this.chartData = [];\n    this.profitLossData = [];\n    this.refreshInterval = null;\n    this.countdown = 30;\n    this.countdownInterval = null;\n    this.lastRefreshTime = new Date();\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n    this.startAutoRefresh();\n  }\n  ngOnDestroy() {\n    this.stopAutoRefresh();\n  }\n  loadDashboardData() {\n    this.isLoading = true;\n    this.error = null;\n    // Load students\n    this.studentService.getStudents().subscribe({\n      next: students => {\n        this.students = students;\n        this.calculateStudentStats();\n        this.checkIfDataLoaded();\n      },\n      error: error => {\n        console.error('Student data error:', error);\n        this.error = 'Ã–ÄŸrenci verileri yÃ¼klenirken hata oluÅŸtu';\n        this.checkIfDataLoaded();\n      }\n    });\n    // Load materials\n    this.materialService.getMaterials().subscribe({\n      next: materials => {\n        this.materials = materials;\n        this.calculateMaterialStats();\n        this.checkIfDataLoaded();\n      },\n      error: error => {\n        console.error('Material data error:', error);\n        this.error = 'Materyal verileri yÃ¼klenirken hata oluÅŸtu';\n        this.checkIfDataLoaded();\n      }\n    });\n  }\n  checkIfDataLoaded() {\n    if (this.students.length > 0 || this.materials.length > 0) {\n      this.isLoading = false;\n      this.lastRefreshTime = new Date();\n    }\n  }\n  calculateStudentStats() {\n    this.totalStudents = this.students.length;\n    this.activeStudents = this.students.filter(s => s.isActive).length;\n  }\n  calculateMaterialStats() {\n    this.totalMaterials = this.materials.length;\n    let totalProfit = 0;\n    let totalLoss = 0;\n    this.materials.forEach(material => {\n      if (material.karZarar > 0) {\n        totalProfit += material.karZarar;\n      } else {\n        totalLoss += Math.abs(material.karZarar);\n      }\n    });\n    this.totalProfit = totalProfit;\n    this.totalLoss = totalLoss;\n    this.netProfit = totalProfit - totalLoss;\n    this.prepareChartData();\n  }\n  prepareChartData() {\n    // Prepare data for charts\n    this.chartData = [{\n      name: 'Toplam Ã–ÄŸrenci',\n      value: this.totalStudents,\n      color: '#3498db'\n    }, {\n      name: 'Aktif Ã–ÄŸrenci',\n      value: this.activeStudents,\n      color: '#2ecc71'\n    }, {\n      name: 'Toplam Materyal',\n      value: this.totalMaterials,\n      color: '#e74c3c'\n    }];\n    this.profitLossData = [{\n      name: 'Kar',\n      value: this.totalProfit,\n      color: '#2ecc71'\n    }, {\n      name: 'Zarar',\n      value: this.totalLoss,\n      color: '#e74c3c'\n    }];\n  }\n  startAutoRefresh() {\n    this.refreshInterval = interval(30000).subscribe(() => {\n      this.loadDashboardData();\n    });\n    this.countdownInterval = interval(1000).subscribe(() => {\n      this.countdown--;\n      if (this.countdown <= 0) {\n        this.countdown = 30;\n      }\n    });\n  }\n  stopAutoRefresh() {\n    if (this.refreshInterval) {\n      this.refreshInterval.unsubscribe();\n    }\n    if (this.countdownInterval) {\n      this.countdownInterval.unsubscribe();\n    }\n  }\n  refreshData() {\n    this.loadDashboardData();\n    this.countdown = 30;\n  }\n  getProfitLossClass(value) {\n    return value >= 0 ? 'profit' : 'loss';\n  }\n  getProfitLossIcon(value) {\n    return value >= 0 ? 'ðŸ“ˆ' : 'ðŸ“‰';\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"names":["Component","interval","DashboardComponent","constructor","studentService","materialService","students","materials","isLoading","error","totalStudents","activeStudents","totalMaterials","totalProfit","totalLoss","netProfit","chartData","profitLossData","refreshInterval","countdown","countdownInterval","lastRefreshTime","Date","ngOnInit","loadDashboardData","startAutoRefresh","ngOnDestroy","stopAutoRefresh","getStudents","subscribe","next","calculateStudentStats","checkIfDataLoaded","console","getMaterials","calculateMaterialStats","length","filter","s","isActive","forEach","material","karZarar","Math","abs","prepareChartData","name","value","color","unsubscribe","refreshData","getProfitLossClass","getProfitLossIcon","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mTp\\student-app\\src\\app\\components\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Student } from '../models/student.model';\r\nimport { Material } from '../models/material.model';\r\nimport { StudentService } from '../services/student.service';\r\nimport { MaterialService } from '../services/material.service';\r\nimport { interval, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit, OnDestroy {\r\n  students: Student[] = [];\r\n  materials: Material[] = [];\r\n  isLoading = false;\r\n  error: string | null = null;\r\n  \r\n  // Statistics\r\n  totalStudents = 0;\r\n  activeStudents = 0;\r\n  totalMaterials = 0;\r\n  totalProfit = 0;\r\n  totalLoss = 0;\r\n  netProfit = 0;\r\n  \r\n  // Charts data\r\n  chartData: any[] = [];\r\n  profitLossData: any[] = [];\r\n  \r\n  private refreshInterval: Subscription | null = null;\r\n  countdown = 30;\r\n  private countdownInterval: Subscription | null = null;\r\n  lastRefreshTime = new Date();\r\n\r\n  constructor(\r\n    private studentService: StudentService,\r\n    private materialService: MaterialService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadDashboardData();\r\n    this.startAutoRefresh();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stopAutoRefresh();\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    // Load students\r\n    this.studentService.getStudents().subscribe({\r\n      next: (students) => {\r\n        this.students = students;\r\n        this.calculateStudentStats();\r\n        this.checkIfDataLoaded();\r\n      },\r\n      error: (error) => {\r\n        console.error('Student data error:', error);\r\n        this.error = 'Ã–ÄŸrenci verileri yÃ¼klenirken hata oluÅŸtu';\r\n        this.checkIfDataLoaded();\r\n      }\r\n    });\r\n\r\n    // Load materials\r\n    this.materialService.getMaterials().subscribe({\r\n      next: (materials) => {\r\n        this.materials = materials;\r\n        this.calculateMaterialStats();\r\n        this.checkIfDataLoaded();\r\n      },\r\n      error: (error) => {\r\n        console.error('Material data error:', error);\r\n        this.error = 'Materyal verileri yÃ¼klenirken hata oluÅŸtu';\r\n        this.checkIfDataLoaded();\r\n      }\r\n    });\r\n  }\r\n\r\n  private checkIfDataLoaded(): void {\r\n    if (this.students.length > 0 || this.materials.length > 0) {\r\n      this.isLoading = false;\r\n      this.lastRefreshTime = new Date();\r\n    }\r\n  }\r\n\r\n  private calculateStudentStats(): void {\r\n    this.totalStudents = this.students.length;\r\n    this.activeStudents = this.students.filter(s => s.isActive).length;\r\n  }\r\n\r\n  private calculateMaterialStats(): void {\r\n    this.totalMaterials = this.materials.length;\r\n    \r\n    let totalProfit = 0;\r\n    let totalLoss = 0;\r\n    \r\n    this.materials.forEach(material => {\r\n      if (material.karZarar > 0) {\r\n        totalProfit += material.karZarar;\r\n      } else {\r\n        totalLoss += Math.abs(material.karZarar);\r\n      }\r\n    });\r\n    \r\n    this.totalProfit = totalProfit;\r\n    this.totalLoss = totalLoss;\r\n    this.netProfit = totalProfit - totalLoss;\r\n    \r\n    this.prepareChartData();\r\n  }\r\n\r\n  private prepareChartData(): void {\r\n    // Prepare data for charts\r\n    this.chartData = [\r\n      { name: 'Toplam Ã–ÄŸrenci', value: this.totalStudents, color: '#3498db' },\r\n      { name: 'Aktif Ã–ÄŸrenci', value: this.activeStudents, color: '#2ecc71' },\r\n      { name: 'Toplam Materyal', value: this.totalMaterials, color: '#e74c3c' }\r\n    ];\r\n\r\n    this.profitLossData = [\r\n      { name: 'Kar', value: this.totalProfit, color: '#2ecc71' },\r\n      { name: 'Zarar', value: this.totalLoss, color: '#e74c3c' }\r\n    ];\r\n  }\r\n\r\n  startAutoRefresh(): void {\r\n    this.refreshInterval = interval(30000).subscribe(() => {\r\n      this.loadDashboardData();\r\n    });\r\n\r\n    this.countdownInterval = interval(1000).subscribe(() => {\r\n      this.countdown--;\r\n      if (this.countdown <= 0) {\r\n        this.countdown = 30;\r\n      }\r\n    });\r\n  }\r\n\r\n  stopAutoRefresh(): void {\r\n    if (this.refreshInterval) {\r\n      this.refreshInterval.unsubscribe();\r\n    }\r\n    if (this.countdownInterval) {\r\n      this.countdownInterval.unsubscribe();\r\n    }\r\n  }\r\n\r\n  refreshData(): void {\r\n    this.loadDashboardData();\r\n    this.countdown = 30;\r\n  }\r\n\r\n  getProfitLossClass(value: number): string {\r\n    return value >= 0 ? 'profit' : 'loss';\r\n  }\r\n\r\n  getProfitLossIcon(value: number): string {\r\n    return value >= 0 ? 'ðŸ“ˆ' : 'ðŸ“‰';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}