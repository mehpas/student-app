{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/student';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n  }\n  getStudents() {\n    console.log('API çağrısı yapılıyor:', `${this.apiUrl}/getStudents`);\n    // Geçici mock data - API çalışmıyorsa kullanılacak\n    const mockStudents = [{\n      id: 1,\n      name: 'Ahmet',\n      surname: 'Yılmaz',\n      email: 'ahmet@example.com',\n      phone: '0555-123-4567',\n      department: 'Bilgisayar Mühendisliği',\n      grade: 3,\n      studentNumber: '2021001'\n    }, {\n      id: 2,\n      name: 'Ayşe',\n      surname: 'Demir',\n      email: 'ayse@example.com',\n      phone: '0555-234-5678',\n      department: 'Elektrik Mühendisliği',\n      grade: 2,\n      studentNumber: '2021002'\n    }, {\n      id: 3,\n      name: 'Mehmet',\n      surname: 'Kaya',\n      email: 'mehmet@example.com',\n      phone: '0555-345-6789',\n      department: 'Makine Mühendisliği',\n      grade: 4,\n      studentNumber: '2021003'\n    }, {\n      id: 4,\n      name: 'Fatma',\n      surname: 'Özkan',\n      email: 'fatma@example.com',\n      phone: '0555-456-7890',\n      department: 'Endüstri Mühendisliği',\n      grade: 1,\n      studentNumber: '2021004'\n    }, {\n      id: 5,\n      name: 'Ali',\n      surname: 'Çelik',\n      email: 'ali@example.com',\n      phone: '0555-567-8901',\n      department: 'İnşaat Mühendisliği',\n      grade: 3,\n      studentNumber: '2021005'\n    }];\n    return this.http.get(`${this.apiUrl}/getStudents`, this.httpOptions).pipe(retry(2),\n    // 2 kez tekrar dene\n    catchError(error => {\n      console.log('API hatası, mock data kullanılıyor:', error);\n      // API çalışmıyorsa mock data döndür\n      return new Observable(observer => {\n        observer.next(mockStudents);\n        observer.complete();\n      });\n    }));\n  }\n  getStudentById(id) {\n    return this.http.get(`${this.apiUrl}/getStudent/${id}`, this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('API Hatası:', error);\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Hata: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Sunucu Hatası: ${error.status} - ${error.message}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","Observable","throwError","catchError","retry","StudentService","constructor","http","apiUrl","httpOptions","headers","getStudents","console","log","mockStudents","id","name","surname","email","phone","department","grade","studentNumber","get","pipe","error","observer","next","complete","getStudentById","handleError","errorMessage","ErrorEvent","message","status","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mTp\\student-app\\src\\app\\services\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { Student } from '../models/student.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentService {\r\n  private apiUrl = 'http://localhost:5000/api/student';\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getStudents(): Observable<Student[]> {\r\n    console.log('API çağrısı yapılıyor:', `${this.apiUrl}/getStudents`);\r\n    \r\n    // Geçici mock data - API çalışmıyorsa kullanılacak\r\n    const mockStudents: Student[] = [\r\n      { id: 1, name: 'Ahmet', surname: 'Yılmaz', email: 'ahmet@example.com', phone: '0555-123-4567', department: 'Bilgisayar Mühendisliği', grade: 3, studentNumber: '2021001' },\r\n      { id: 2, name: 'Ayşe', surname: 'Demir', email: 'ayse@example.com', phone: '0555-234-5678', department: 'Elektrik Mühendisliği', grade: 2, studentNumber: '2021002' },\r\n      { id: 3, name: 'Mehmet', surname: 'Kaya', email: 'mehmet@example.com', phone: '0555-345-6789', department: 'Makine Mühendisliği', grade: 4, studentNumber: '2021003' },\r\n      { id: 4, name: 'Fatma', surname: 'Özkan', email: 'fatma@example.com', phone: '0555-456-7890', department: 'Endüstri Mühendisliği', grade: 1, studentNumber: '2021004' },\r\n      { id: 5, name: 'Ali', surname: 'Çelik', email: 'ali@example.com', phone: '0555-567-8901', department: 'İnşaat Mühendisliği', grade: 3, studentNumber: '2021005' }\r\n    ];\r\n    \r\n    return this.http.get<Student[]>(`${this.apiUrl}/getStudents`, this.httpOptions)\r\n      .pipe(\r\n        retry(2), // 2 kez tekrar dene\r\n        catchError((error) => {\r\n          console.log('API hatası, mock data kullanılıyor:', error);\r\n          // API çalışmıyorsa mock data döndür\r\n          return new Observable<Student[]>(observer => {\r\n            observer.next(mockStudents);\r\n            observer.complete();\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getStudentById(id: number): Observable<Student> {\r\n    return this.http.get<Student>(`${this.apiUrl}/getStudent/${id}`, this.httpOptions)\r\n      .pipe(\r\n        retry(2),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    console.error('API Hatası:', error);\r\n    \r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Hata: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Sunucu Hatası: ${error.status} - ${error.message}`;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}